/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package qa.all.afaanoromoo;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * 
 * Created on 04-Apr-2022, 17:55:57
 */


import java.io.File;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.document.Document;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

/**
 * 
 * @author nuguse negese.
 */
public class AQAMain extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;
	public String questiontype;

    /**
     *
     */
    public static String Queryword = null;// the analyzed query word accesible

	// throughout AQA

	/** Creates new form Test */
	public AQAMain() {
        this.questiontype = null;
		initComponents();
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		Amarachmelis1 = new javax.swing.JLabel();
		Amarachmelis2 = new javax.swing.JLabel();
		Amarachmelis3 = new javax.swing.JLabel();
		Amarachmelis4 = new javax.swing.JLabel();
		TAmarachmelis4 = new javax.swing.JTextField();
		TAmarachmelis3 = new javax.swing.JTextField();
		TAmarachmelis2 = new javax.swing.JTextField();
		TAmarachmelis1 = new javax.swing.JTextField();
		Amarachmelis5 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		Answer = new javax.swing.JButton();
                cancel= new  javax.swing.JButton();
		Amarachmelis6 = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JTextArea();
		Amarachmelis7 = new javax.swing.JLabel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextArea3 = new javax.swing.JTextArea();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Afaanoromo speech Based question for  Question Answerig (AF-GAAFFII)");
		setFont(new java.awt.Font("Times New Roman", 0, 4)); // NOI18N
		setForeground(new java.awt.Color(204, 255, 204));

		Amarachmelis1.setBackground(new java.awt.Color(204, 204, 255));
		Amarachmelis1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis1.setText("Deebii Filannoo 1:");
		Amarachmelis1.setOpaque(true);

		Amarachmelis2.setBackground(new java.awt.Color(204, 204, 255));
		Amarachmelis2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis2.setText("Deebii Filannoo 2:");
		Amarachmelis2.setOpaque(true);

		Amarachmelis3.setBackground(new java.awt.Color(204, 204, 255));
		Amarachmelis3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis3.setText("Deebii Filannoo 3:");
		Amarachmelis3.setOpaque(true);

		Amarachmelis4.setBackground(new java.awt.Color(204, 204, 255));
		Amarachmelis4.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis4.setText("Deebii Filannoo 4:");
		Amarachmelis4.setOpaque(true);

		TAmarachmelis4.setBackground(new java.awt.Color(255, 255, 204));
		TAmarachmelis4.setEditable(true);
		TAmarachmelis4.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

		TAmarachmelis3.setBackground(new java.awt.Color(255, 255, 204));
		TAmarachmelis3.setEditable(true);
		TAmarachmelis3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

		TAmarachmelis2.setBackground(new java.awt.Color(255, 255, 204));
		TAmarachmelis2.setEditable(false);
		TAmarachmelis2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

		TAmarachmelis1.setBackground(new java.awt.Color(255, 255, 204));
		TAmarachmelis1.setEditable(false);
		TAmarachmelis1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N

		Amarachmelis5.setBackground(new java.awt.Color(250, 251, 203));
		Amarachmelis5.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis5.setText("Gaaffii");
		Amarachmelis5.setOpaque(true);

		jTextArea1.setColumns(20);
		jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		jTextArea1.setLineWrap(true);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);
                
                // cancel.setFont(new java.awt.Font("Times New Roman",0,24));
                 //cancel.setText("Balessi");
                // cancel.setVisible(true);
                 //cancel.addAncestorListener(new java.awt.event.ActionListener);
		Answer.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Answer.setText("Deebii");
		Answer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					AnswerActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		Amarachmelis6.setBackground(new java.awt.Color(204, 255, 204));
		Amarachmelis6.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis6.setText("Deebii");
		Amarachmelis6.setOpaque(true);

		jTextArea2.setBackground(new java.awt.Color(255, 255, 204));
		jTextArea2.setColumns(20);
		jTextArea2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		jTextArea2.setLineWrap(true);
		jTextArea2.setRows(5);
		jScrollPane2.setViewportView(jTextArea2);

		Amarachmelis7.setBackground(new java.awt.Color(204, 255, 204));
		Amarachmelis7.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		Amarachmelis7.setText("Madda");
		Amarachmelis7.setOpaque(true);

		jTextArea3.setBackground(new java.awt.Color(255, 255, 204));
		jTextArea3.setColumns(20);
		jTextArea3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
		jTextArea3.setLineWrap(true);
		jTextArea3.setRows(5);
		jScrollPane3.setViewportView(jTextArea3);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
		layout.createSequentialGroup().addGroup(layout.createParallelGroup(
							javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												Amarachmelis5,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												77,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addGap(
																												18,
																												18,
																												18)
																										.addComponent(
																												jScrollPane1,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												621,
																												javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addGroup(
																												layout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.TRAILING)
																														.addComponent(
																																Amarachmelis3,
																																javax.swing.GroupLayout.PREFERRED_SIZE,
																																241,
																																javax.swing.GroupLayout.PREFERRED_SIZE)
																														.addComponent(
																																Amarachmelis1,
																																javax.swing.GroupLayout.PREFERRED_SIZE,
																																241,
																																javax.swing.GroupLayout.PREFERRED_SIZE)
																														.addComponent(
																																Amarachmelis2,
																																javax.swing.GroupLayout.PREFERRED_SIZE,
																																241,
																																javax.swing.GroupLayout.PREFERRED_SIZE)
																														.addComponent(
																																Amarachmelis4,
																																javax.swing.GroupLayout.PREFERRED_SIZE,
																																241,
																																javax.swing.GroupLayout.PREFERRED_SIZE))
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addGroup(
																												layout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.LEADING,
																																false)
																														.addComponent(
																																TAmarachmelis1)
																														.addComponent(
																																TAmarachmelis2)
																														.addComponent(
																																TAmarachmelis3)
																														.addComponent(
																																TAmarachmelis4,
																																javax.swing.GroupLayout.DEFAULT_SIZE,
																																469,
																																Short.MAX_VALUE)))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												Amarachmelis6,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												77,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addGap(
																												18,
																												18,
																												18)
																										.addComponent(
																												jScrollPane2,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												621,
																												javax.swing.GroupLayout.PREFERRED_SIZE)))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				6,
																				Short.MAX_VALUE))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				275,
																				275,
																				275)
																		.addComponent(
																				Answer)))
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGap(
																				204,
																				204,
																				204)
																		.addComponent(
																				Amarachmelis7,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				77,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(
																				156,
																				156,
																				156))
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																layout
																		.createSequentialGroup()
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE)
																		.addComponent(
																				jScrollPane3,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				427,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addContainerGap()))));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addContainerGap()
																										.addComponent(
																												Amarachmelis5,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												24,
																												javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addComponent(
																								jScrollPane1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								70,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				Answer,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				39,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												Amarachmelis6,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												24,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addGap(
																												38,
																												38,
																												38))
																						.addGroup(
																								layout
																										.createSequentialGroup()
																										.addComponent(
																												jScrollPane2,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												70,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addGap(
																												18,
																												18,
																												18)))
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								Amarachmelis1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								24,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								TAmarachmelis1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								33,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								Amarachmelis2,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								24,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								TAmarachmelis2,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								34,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGap(
																				12,
																				12,
																				12)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								Amarachmelis3,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								24,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								TAmarachmelis3,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								34,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGap(
																				14,
																				14,
																				14)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								Amarachmelis4,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								24,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								TAmarachmelis4,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								34,
																								javax.swing.GroupLayout.PREFERRED_SIZE)))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				Amarachmelis7,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				24,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jScrollPane3)))
						.addGap(19, 19, 19)));

		pack();
	}// </editor-fold>

	private void AnswerActionPerformed(java.awt.event.ActionEvent evt)
			throws Exception {
		jTextArea2.setText("");
		jTextArea3.setText("");
		TAmarachmelis1.setText("");
		TAmarachmelis2.setText("");
		TAmarachmelis3.setText("");
		TAmarachmelis4.setText("");
		//Document base Indexing
	//File indexDir = new File("DOIndexes");
	//	Paragraph Based Indexing
	//File indexDir = new File("PAIndexes");
	//Sentence base Indexing
     File indexDir = new File("SEIndexes ");
		QueryGenerator qgen = new QueryGenerator();
		AnalyzeQuestion an = new AnalyzeQuestion();
		DocumentNormalization dn=new DocumentNormalization();
		if (jTextArea1.getText().equals("")) {
			JOptionPane.showMessageDialog(null, "Please Enter a Question!!!.");
		} else {
			questiontype = an.AnalyzedQuery(dn.NormalizeQuery(jTextArea1.getText()));
			if (questiontype == null) {
				JOptionPane.showMessageDialog(null, "Not Factoid Question!!!.");
				jTextArea1.setText("");
			} else {
				String q = qgen.QueryExpand((jTextArea1.getText()));
				 q= "\""+q+"\"";
				Queryword = q;
				if (!indexDir.exists() || !indexDir.isDirectory()) {
					throw new Exception(indexDir
							+ " does not exist or is not a directory.");
				}
				search(indexDir, q);
			}
		}
	}
	public  void search(File indexDir, String q) throws Exception {
              //  @SuppressWarnings("deprecation")
               // bolean create =true;
		Directory fsDir = FSDirectory.getDirectory(indexDir,false);
		IndexSearcher is = new IndexSearcher(fsDir);
		System.out.println(is.maxDoc());
		// String[] names = { "ትንሣዔ", "ለምለም", "ቴዎድርስ" };
		// Query query = QueryParser.parse(q, "content", new AmharicAnalyzer());
		QueryParser qp = new QueryParser("content", new AfaanoromoAnalyzer());
		qp.setPhraseSlop(5);
		Query query = qp.parse(q);
		long start = new Date().getTime();
                @SuppressWarnings("deprecation")
		Hits hits = is.search(query);
		long end = new Date().getTime();
		System.err.println("Found " + hits.length() + " document(s) (in "
				+ (end - start) + " milliseconds) that matched query '" + q
				+ "':");
		start = new Date().getTime();
		//Vector vt = new Vector();
		int y = 0;
		jTextArea2.setText("");
		jTextArea3.setText("");
		HashMap<String, HashMap<String, Integer>> hm = new HashMap<>();
		HashMap<String, HashMap<String, Integer>> Origmap = new HashMap<>();
		//for (int l = 0; l < hits.length();l++) {// i<hits.length()
		// Document doc = hits.doc(0);// /l
            //    TopDocs topDocs = searcher.search(query, numHits);
  // ScoreDoc[] hits = topDocs.scoreDocs;
 //  for (int i = 0; i < hits.length; i++) {
 //    int docId = hits[i].doc;
    // Document d = searcher.doc(docId);
     // do something with current hit
		DatePatternRule date = new DatePatternRule();
		NameExtractor extractname = new NameExtractor();
		PatternBasedNameExtractor patnameextr = new PatternBasedNameExtractor();
		NumberExtractor numext = new NumberExtractor();
		PlaceExtractor extractplace = new PlaceExtractor();

		//HashMap<String, Integer> hm = new HashMap<String, Integer>();

		if (questiontype.equals("Time")) {
			Ranker rk = new Ranker();
			OneDocOneAnswerSelector oneans = new OneDocOneAnswerSelector();
			int k=hits.length();//consider top hundred or less documents only
			if((k>25)&&(indexDir.getAbsolutePath().contains("DOIndexes")))
				k=25;
			else if((k>50)&&(indexDir.getAbsolutePath().contains("PAIndexes")))
				k=50;
			else if((k>100)&&(indexDir.getAbsolutePath().contains("SEIndexes")))
				k=100;
			for (int m = 0; m < k; m++) {
			Document 	doc = hits.doc(m);
			HashMap<String, String> x  = date.matchdate(doc.get("content"));
			hm = oneans.OneNameOneDoc(x, Queryword);
			Iterator it = hm.keySet().iterator();
			while (it.hasNext()) {
				if (it.next().toString() == "NoAnswer") {
				}
				rk.AddToHash(hm, Origmap, m);
				hm.clear();
			} 
			}
			// sort the answer candidates
			HashMap<String, HashMap<String, Integer>> map = new HashMap<String, HashMap<String, Integer>>();
			List docs = new ArrayList(1);
			List answer = new ArrayList(1);
			rk.RankedAnswers(Origmap, Origmap, docs, answer);
			Iterator it = docs.iterator();
			int count = 0;
			if(!it.hasNext());
			jTextArea2.setText("No Answer");
			while (it.hasNext()) {
				it.next();
				String x = (String) answer.get(count);
				StringTokenizer nametoken = new StringTokenizer(x);
				if (nametoken.countTokens() >=1) {// encourage answers of two
					// term or more
					if (y == 0) {
						jTextArea2.setText(x);
						jTextArea3.append((String) docs.get(count));
						y = y + 1;
					} else if (y == 1) {
						TAmarachmelis1.setText(x);
						y = y + 1;
					} else if (y == 2) {
						TAmarachmelis2.setText(x);
						y = y + 1;
					} else if (y == 3) {
						TAmarachmelis3.setText(x);
						y = y + 1;
					} else if (y == 4) {
						TAmarachmelis4.setText(x);
						y = y + 1;
					}
				}
				count = count + 1;
		}
		}
		else if (questiontype.equals("Person")) {
			Ranker rk = new Ranker();
			OneDocOneAnswerSelector oneans = new OneDocOneAnswerSelector();
                        
                   //     TopScoreDocCollector collector = new TopScoreDocCollector(hitsPerPage);
              // searcher.search(query, collector);
                     //  ScoreDoc[] hits = collector.topDocs().scoreDocs;
                    //for (int i = 0; i < hits.length; i++) {
                    //   int docId = hits[i].doc;
                     //    Document d = searcher.doc(docId);
			int k=hits.length();//consider top hundred or less documents only
			if((k>25)&&(indexDir.getAbsolutePath().contains("DOIndexes")))
				k=25;
			else if((k>50)&&(indexDir.getAbsolutePath().contains("PAIndexes")))
				k=50;
			else if((k>100)&&(indexDir.getAbsolutePath().contains("SEIndexes")))
				k=100;
			for (int m = 0; m < k; m++) {
				Document doc = hits.doc(m);
				
				/*HashMap<String, String> x = extractname.PersonName(doc
				  .get("content"), new File(
				 "C:\\datadir\\Gazetteers\\personname.txt"));*/
				 // matched sentence and path of person name gazeeter
				HashMap<String, String> x = patnameextr.Answer(doc
						.get("content"));
				hm = oneans.OneNameOneDoc(x, Queryword);
				Iterator it = hm.keySet().iterator();
				while (it.hasNext()) {
					if ("NoAnswer".equals(it.next().toString())) {
					}
					rk.AddToHash(hm, Origmap, m);
					hm.clear();
				}

			}
			// sort the answer candidates
			HashMap<String, HashMap<String, Integer>> map = new HashMap<>();
			List docs = new ArrayList();
			List answer = new ArrayList();
			rk.RankedAnswers(Origmap, Origmap, docs, answer);
			Iterator it = docs.iterator();
			int count = 0;
			if(!it.hasNext());
			jTextArea2.setText("No Answer");
			while (it.hasNext()) {
				it.next();
				String x = (String) answer.get(count);
				StringTokenizer nametoken = new StringTokenizer(x);
				if (nametoken.countTokens() > 1) {// encourage answers of two
					// term or more
					if (y == 0) {
						if(x.length()<1)
							x="No Answer";
						jTextArea2.setText(x);
						jTextArea3.append((String) docs.get(count));
						y = y + 1;
					} else if (y == 1) {
						TAmarachmelis1.setText(x);
						y = y + 1;
					} else if (y == 2) {
						TAmarachmelis2.setText(x);
						y = y + 1;
					} else if (y == 3) {
						TAmarachmelis3.setText(x);
						y = y + 1;
					} else if (y == 4) {
						TAmarachmelis4.setText(x);
						y = y + 1;
					}
				}
				count = count + 1;
			}
		} else if (questiontype.equals("Place")) {
			Ranker rk = new Ranker();
			OneDocOneAnswerSelector oneans = new OneDocOneAnswerSelector();
			int k=hits.length();//consider top hundred or less documents only
			if((k>25)&&(indexDir.getAbsolutePath().contains("DOIndexes")))
				k=25;
			else if((k>50)&&(indexDir.getAbsolutePath().contains("PAIndexes")))
				k=50;
			else if((k>100)&&(indexDir.getAbsolutePath().contains("SEIndexes")))
				k=100;
			for (int m = 0; m < k; m++) {
				Document doc = hits.doc(m);
				HashMap<String, String> x = extractname.PersonName(doc
						.get("content"), new File(
						"placename.txt"));// matched sentence
				// and path of person name gazeeter
				hm = oneans.OneNameOneDoc(x, Queryword);
				rk.AddToHash(hm, Origmap, m);
				hm.clear();
			}
			// sort the answer candidates
			HashMap<String, HashMap<String, Integer>> map = new HashMap<String, HashMap<String, Integer>>();
			List docs = new ArrayList();
			List answer = new ArrayList();
			rk.RankedAnswers(Origmap, Origmap, docs, answer);
			Iterator it = docs.iterator();
			int count = 0;
			while (it.hasNext()) {
				it.next();
				String x = (String) answer.get(count);
				StringTokenizer nametoken = new StringTokenizer(x);
				if (nametoken.countTokens() > 0) {// encourage answers of two
					// term or more
					if (y == 0) {
						if(x.length()<1)
							x="No Answer";
						jTextArea2.setText(x);
						jTextArea3.append((String) docs.get(count));
						y = y + 1;
					} else if (y == 1) {
						TAmarachmelis1.setText(x);
						y = y + 1;
					} else if (y == 2) {
						TAmarachmelis2.setText(x);
						y = y + 1;
					} else if (y == 3) {
						TAmarachmelis3.setText(x);
						y = y + 1;
					} else if (y == 4) {
						TAmarachmelis4.setText(x);
						y = y + 1;
					}
				}
				count = count + 1;
			}
		}
		  else if (questiontype.equals("Number")) {
			  Ranker rk = new Ranker();
			  OneDocOneAnswerSelector oneans = new OneDocOneAnswerSelector();
			  int k=hits.length();//consider top hundred or less documents only
			  if((k>25)&&(indexDir.getAbsolutePath().contains("DOIndexes")))
					k=25;
				else if((k>50)&&(indexDir.getAbsolutePath().contains("PAIndexes")))
					k=50;
				else if((k>100)&&(indexDir.getAbsolutePath().contains("SEIndexes")))
					k=100;
				for (int m = 0; m < k; m++)  
		  { 
			  Document doc = hits.doc(m);
			  HashMap<String, String> x  = numext.Extractanynumber(doc.get("content"));
				hm = oneans.OneNameOneDoc(x, Queryword);
				rk.AddToHash(hm, Origmap, m);
				hm.clear();
		  }
				HashMap<String, HashMap<String, Integer>> map = new HashMap<String, HashMap<String, Integer>>();
				List docs = new ArrayList();
				List answer = new ArrayList();
				rk.RankedAnswers(Origmap, Origmap, docs, answer);
				Iterator it = docs.iterator();
				int count = 0;
				if(!it.hasNext());
				jTextArea2.setText("No Answer");
				while (it.hasNext()) {
					it.next();
					String x = (String) answer.get(count);
					StringTokenizer nametoken = new StringTokenizer(x);
					if (nametoken.countTokens() >= 1) {// encourage answers of two
						// term or more
						if (y == 0) {
							jTextArea2.setText(x);
							jTextArea3.append((String) docs.get(count));
							y = y + 1;
						} else if (y == 1) {
							TAmarachmelis1.setText(x);
							y = y + 1;
						} else if (y == 2) {
							TAmarachmelis2.setText(x);
							y = y + 1;
						} else if (y == 3) {
							TAmarachmelis3.setText(x);
							y = y + 1;
						} else if (y == 4) {
							TAmarachmelis4.setText(x);
							y = y + 1;
						}
					}
					count = count + 1;
				}
		  }  		 
		NumberFormat form = NumberFormat.getInstance();
		form.setMinimumFractionDigits(3);
		form.setMaximumFractionDigits(3);
		end = new Date().getTime();
		double x = (((double) end - (double) start) / 60000);
		String time = form.format(x);
		JOptionPane.showMessageDialog(null, "It takes:" + time
				+ " minute to answer this question");
		/*
		jTextArea2.setText("");
		jTextArea3.setText("");
		TAmarachmelis1.setText("");
		TAmarachmelis2.setText("");
		TAmarachmelis3.setText("");
		TAmarachmelis4.setText("");
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
        }
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new AQAMain().setVisible(true);
			}
		});
	}

        
        
        
	// Variables declaration - do not change
	private javax.swing.JLabel Amarachmelis1;
	private javax.swing.JLabel Amarachmelis2;
	private javax.swing.JLabel Amarachmelis3;
	private javax.swing.JLabel Amarachmelis4;
	private javax.swing.JLabel Amarachmelis5;
	private javax.swing.JLabel Amarachmelis6;
	private javax.swing.JLabel Amarachmelis7;
	private javax.swing.JButton Answer;
        private javax.swing.JButton cancel;
       
	private javax.swing.JTextField TAmarachmelis1;
	private javax.swing.JTextField TAmarachmelis2;
	private javax.swing.JTextField TAmarachmelis3;
	private javax.swing.JTextField TAmarachmelis4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextArea jTextArea2;
	private javax.swing.JTextArea jTextArea3;

    
	

}
